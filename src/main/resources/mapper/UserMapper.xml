<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="hxc.manage.mapper.UserMapper">
    <resultMap id="BaseResultMap" type="hxc.manage.model.User">
        <id column="id" property="id"/>
        <result column="enabled" property="enabled"/>
        <result column="password" property="password"/>
    </resultMap>
    <resultMap id="lazyLoadRoles" type="hxc.manage.model.User" extends="BaseResultMap">
        <collection property="roles" ofType="hxc.manage.model.Role" select="hxc.manage.mapper.UserMapper.getRolesByUserId"
                    column="id"></collection>
    </resultMap>
    <resultMap id="eagerLoadRoles" type="hxc.manage.model.User" extends="BaseResultMap">
        <collection property="roles" ofType="hxc.manage.model.Role">
            <id property="id" column="rid"/>
            <result property="name" column="rname"/>
            <result property="nameZh" column="rnameZh"/>
        </collection>
    </resultMap>
    <select id="loadUserByUsername" resultMap="lazyLoadRoles">
        SELECT
            a.*,b.*,c.name department
        FROM
            `user` a,
            user_details b,
            tree_people c
        WHERE
            a.id = b.user_id
            AND a.tree = c.tree_code
            and  b.workID = #{username};
    </select>
    <select id="getRolesByUserId" resultType="hxc.manage.model.Role">
        SELECT r.* FROM user_role h,role r where h.rid=r.id AND h.userid=#{id}
    </select>
    <!--<insert id="userReg">-->
        <!--INSERT INTO user set username=#{username},password=#{password}-->
    <!--</insert>-->
    <!--<select id="getUsersByKeywords" resultMap="eagerLoadRoles">-->
        <!--select h.*,`r`.`id` AS `rid`,`r`.`name` AS `rname`,`r`.`nameZh` AS `rnameZh` from ((`user` `h` left join `user_role`-->
        <!--`h_r` on ((`h`.`id` = `h_r`.`userid`))) left join `role` `r` on ((`h_r`.`rid` = `r`.`id`))) where h.`id` not-->
        <!--in(select h_r.`userid` from user_role h_r,role r where h_r.`rid`=r.`id` and r.`nameZh`='系统管理员')-->
        <!--<if test="keywords!='all' and keywords!=''">-->
            <!--and h.`name` like concat('%',#{keywords},'%')-->
        <!--</if>-->
        <!--order by h.`id` limit 10-->
    <!--</select>-->
    <!--<select id="getUserById" resultMap="eagerLoadRoles">-->
        <!--select h.*,`r`.`id` AS `rid`,`r`.`name` AS `rname`,`r`.`nameZh` AS `rnameZh` from ((`user` `h` left join `user_role`-->
        <!--`h_r` on ((`h`.`id` = `h_r`.`userid`))) left join `role` `r` on ((`h_r`.`rid` = `r`.`id`))) where h.`id`=#{userId}-->
    <!--</select>-->
    <!--<update id="updateUser" parameterType="hxc.manage.model.User">-->
        <!--update user-->
        <!--<set>-->
            <!--<if test="name != null">-->
                <!--name = #{name,jdbcType=VARCHAR},-->
            <!--</if>-->
            <!--<if test="phone != null">-->
                <!--phone = #{phone,jdbcType=CHAR},-->
            <!--</if>-->
            <!--<if test="telephone != null">-->
                <!--telephone = #{telephone,jdbcType=VARCHAR},-->
            <!--</if>-->
            <!--<if test="address != null">-->
                <!--address = #{address,jdbcType=VARCHAR},-->
            <!--</if>-->
            <!--<if test="enabled != null">-->
                <!--enabled = #{enabled,jdbcType=BIT},-->
            <!--</if>-->
            <!--<if test="password != null">-->
                <!--password = #{password,jdbcType=VARCHAR},-->
            <!--</if>-->
            <!--<if test="userface != null">-->
                <!--userface = #{userface,jdbcType=VARCHAR},-->
            <!--</if>-->
            <!--<if test="remark != null">-->
                <!--remark = #{remark,jdbcType=VARCHAR},-->
            <!--</if>-->
        <!--</set>-->
        <!--where id = #{id}-->
    <!--</update>-->
    <!--<delete id="deleteRoleByUserId" parameterType="Long">-->
        <!--DELETE FROM user_role where userid=#{userId}-->
    <!--</delete>-->
    <!--<insert id="addRolesForUser">-->
        <!--INSERT INTO user_role(userid,rid) VALUES-->
        <!--<foreach collection="rids" separator="," item="rid">-->
            <!--(#{userId},#{rid})-->
        <!--</foreach>-->
    <!--</insert>-->
    <!--<delete id="deleteUser" parameterType="Long">-->
        <!--DELETE FROM user WHERE id=#{userId}-->
    <!--</delete>-->
    <select id="getAllUser" resultType="hxc.manage.model.User">
        select * from user
        <if test="currentId!=null">
            WHERE id !=#{currentId}
        </if>
    </select>

    <select id="getEmployeeByPage" resultType="hxc.manage.model.UserDetail">
        SELECT
            e.workID,e.`name`,e.phone,e.email,e.gender,a.enabled enable,c.office 'office_id',b.`name` department
        FROM
            user_details e
            left join `user` a on a.id = e.user_id
            left join office c on c.id = e.office_id
            left join tree_people b on b.tree_code = a.tree


    </select>

    <update id="editUser">
        update `user` set
        <if test="tree!='' and tree!=null">
            tree=#{tree}
        </if>
        <if test="enable!='' and enable!=null">
            ,enabled=#{enable}
        </if>
        <if test="password!='' and password!=null and password!='null'">
            ,password=#{password}
        </if>
        where id =
        (select user_id from
        (select user_id from `user_details` a,user b where a.user_id = b.id and a.id=#{id}) t1 )
    </update>

    <!--分院、教研室-->
    <select id="getAllTreePeople" resultType="map" parameterType="java.lang.String">
        select * from tree_people where parent_id in
        <if test="name!=''">
            (select id from tree_people where name = #{name})
        </if>
        <if test="name=='' or name == null">
            (0)
        </if>
    </select>
    <!--教师-->
    <select id="getAllTreePeople1" resultType="map" parameterType="java.lang.String">
        select c.name from tree_people a,user b,user_details c where c.user_id = b.id and  b.tree = a.tree_code and a.name =  #{name}
    </select>

    <update id="editUserDetails">
      update user_details set name=#{name},gender=#{gender},
      email=#{email},phone=#{phone},office_id = #{office_id} where id = #{id}
    </update>
    <delete id="delByUserId">
        delete from `user` WHERE id IN
        <foreach collection="ids" separator="," open="(" close=")" item="id">
            #{id}
        </foreach>

    </delete>
    <delete id="delDetailByUserId">
        delete from `user_details` WHERE user_id IN
        <foreach collection="ids" separator="," open="(" close=")" item="id">
            #{id}
        </foreach>

    </delete>
    <delete id="delRoleByUserId">
        delete from `user_role` WHERE userid IN
        <foreach collection="ids" separator="," open="(" close=")" item="id">
            #{id}
        </foreach>

    </delete>
    <insert id="addEmps">
        insert into user_details (name, gender,office_id,email,phone,workID,user_id)
        values
        <foreach collection="emps" item="emp" separator=",">
            (#{emp.name,jdbcType=VARCHAR}, #{emp.gender,jdbcType=CHAR},#{emp.office_id,jdbcType=VARCHAR}, #{emp.email,jdbcType=VARCHAR},
            #{emp.phone,jdbcType=VARCHAR},#{emp.workID,jdbcType=BIGINT},#{emp.user_id,jdbcType=BIGINT}
            )
        </foreach>
    </insert>

    <insert id="addUser" useGeneratedKeys="true" keyProperty="user_id">
        insert into `user`(tree,password) values (#{tree},#{password});
    </insert>

    <select id="getUserByPage" resultType="hxc.manage.model.UserDetail">
        select
        a.id,
        a.NAME,
        a.gender,
        a.workID,
        a.note,
        d.id office_id,
        a.email,
        a.phone,
        b.enabled enable,
        b.tree
        from user_details a,user b,tree_people c,office d  where a.office_id = d. id and a.user_id=b.id and b.tree = c. tree_code

        <if test="rank==3">
            and a.name like '%' #{keywords} '%'
        </if>
        <if test="rank==2">
            and c.name=#{keywords}
        </if>
        <if test="rank==1">
            and c.parent_id in (select tree_code from tree_people where name =#{keywords} )
        </if>
        <if test="start!=null and size!=null">
            limit #{start},#{size}
        </if>
    </select>
    <select id="getUserByCount" resultType="java.lang.Integer">
        select count(1) from user_details a,user b,tree_people c  where a.user_id=b.id and b.tree = c. tree_code
        and c.state=1

        <if test="rank==3">
            and a.name=#{keywords} and b.enabled=1
        </if>
        <if test="rank==2">
            and c.name=#{keywords} and b.enabled=1
        </if>
        <if test="rank==1">
            and b.enabled=1 and c.parent_id in (select tree_code from tree_people where name =#{keywords} )
        </if>
        <if test="enabled != null">
            and enabled = #{enabled}
        </if>
        <if test="name!='' and name != null">
            and a.name like '%'#{name}'%'
        </if>
        <if test="tree!='' and tree != null">
            and tree = #{tree}
        </if>
        <if test="workID!='' and workID != null">
            and workID = #{workID}
        </if>
    </select>
    <select id="getLastUserWorkId" resultType="java.lang.Integer">
        select max(workID) from user_details;
    </select>
    <select id="searchInfo" resultType="hxc.manage.model.UserDetail">
        select user_details.*,user.tree,user.enabled enable  from `user`,user_details where 1=1
        <if test="emp.enable != null">
            and enabled = #{emp.enable}
        </if>
        <if test="emp.name!='' and emp.name != null">
            and name like #{emp.name}
        </if>

        <if test="emp.tree!='' and emp.tree != null">
            and tree = #{emp.tree}
        </if>
        <if test="emp.workID!='' and emp.workID != null">
            and workID = #{emp.workID}
        </if>
        and user.id=user_details.user_id

        limit #{map.start},#{map.size}
    </select>
    <select id="getAllOffice" resultType="hxc.manage.model.Office">

        select * from office
    </select>

</mapper>